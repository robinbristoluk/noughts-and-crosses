{"version":3,"sources":["StateMachines/gameStateMachine.js","Hooks/useGameStateMachine.js","Contexts/GameContext.js","Hooks/useTypeText.js","Components/Header.js","Hooks/useGameContext.js","Components/Square.js","Components/Board.js","Components/GameStatus.js","App.js","serviceWorker.js","index.js"],"names":["winning_combos","getWinningLine","squares","find","a","b","c","Machine","id","context","Array","fill","isXTurn","xStartedLast","winningCombo","initial","states","playing","on","MAKE_MOVE","target","actions","checkingBoard","always","cond","gameOver","won","drawn","PLAY_AGAIN","updateGame","assign","event","map","sq","index","square","updateWhoseTurn","resetGame","setWinningCombo","guards","isGameWon","isBoardFull","some","s","wasXTurn","wasOTurn","useGameStateMachine","useMachine","gameStateMachine","gameContext","createContext","children","current","send","isInState","toCheck","matches","providerObj","whoseTurn","isPlaying","isGameOver","isGameDrawn","iCheckingBoard","nextPlayerToStart","isSquareEmpty","isWinningSquare","includes","markSquare","playAgain","Provider","value","useTypeText","text","delayPerKeystroke","useState","typedText","setTypedText","useEffect","timeout","setTimeout","length","oldText","clearTimeout","useContext","useGameContext","classes","classnames","className","onClick","boardClasses","classNames","Square","key","CSSTransition","in","unmountOnExit","App","GameContext","Header","GameStatus","Board","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2fbc08d5.chunk.js","sourcesContent":["import { Machine, assign } from 'xstate';\n\nconst winning_combos = [\n    [0,1,2],\n    [3,4,5],\n    [6,7,8],\n    [0,3,6],\n    [1,4,7],\n    [2,5,8],\n    [0,4,8],\n    [6,4,2]\n];\n\nconst getWinningLine = (squares) => {\n    const winningCombo =  winning_combos.find(([a,b,c]) => {\n        return (squares[a] === squares[b]) &&\n               (squares[b] === squares[c]) &&\n               !!squares[a];\n    });\n    return winningCombo;\n}\n\nexport default Machine({\n    id: 'GS',\n    context: {\n        squares: Array(9).fill(null),\n        isXTurn: true,\n        xStartedLast: true,\n        winningCombo: null\n    },\n    initial: 'playing',\n    states: {\n        playing: {\n            on: {\n                MAKE_MOVE: {\n                    target: 'checkingBoard',\n                    actions: 'updateGame'\n                }\n            }\n        },\n        checkingBoard: {\n            always: [\n                {\n                    target: '#GS.gameOver.won',\n                    cond: 'isGameWon',\n                    actions: 'setWinningCombo'\n                },\n                {\n                    target: '#GS.gameOver.drawn',\n                    cond: 'isBoardFull'\n                },\n                { \n                    target: '#GS.playing',\n                    actions: 'updateWhoseTurn'\n                }\n            ]\n        },\n        gameOver: {\n            states: {\n                won: {},\n                drawn: {}\n            },\n            on: {\n                PLAY_AGAIN: [\n                    {  \n                        target: '#GS.playing',\n                        actions: 'resetGame'\n                    }\n                ]\n            }\n        },\n    }\n},\n{\n    actions: {\n        updateGame: assign({\n            squares: ({squares, isXTurn}, event) => squares.map((sq, index) => {\n                return index === event.square ?\n                    (isXTurn ? 'X' : 'O') :\n                    sq;\n            })\n        }),\n        updateWhoseTurn: assign({\n            isXTurn: context => !context.isXTurn\n        }),\n        resetGame: assign({\n            squares: Array(9).fill(null),\n            xStartedLast: context => !context.xStartedLast,\n            isXTurn: context => !context.xStartedLast,\n            winningCombo: null\n        }),\n        setWinningCombo: assign({\n            winningCombo: (context) => getWinningLine(context.squares)\n        })\n    },\n    guards: {\n        isGameWon: context => {\n            const winningLine = getWinningLine(context.squares);\n            return !!winningLine;\n        },\n        isBoardFull: context => {\n            return !context.squares.some(s => s === null);\n        },\n        wasXTurn: context => context.isXTurn,\n        wasOTurn: context => !context.isXTurn\n    }\n});","import { useMachine }  from '@xstate/react';\nimport gameStateMachine from '../StateMachines/gameStateMachine';\n\nconst useGameStateMachine = () => {\n    return useMachine(gameStateMachine);\n}\n\nexport default useGameStateMachine;","import React, {createContext} from 'react';\nimport useGameStateMachine from '../Hooks/useGameStateMachine';\n\nexport const gameContext = createContext();\n\nexport default ({children}) => {\n    const [current, send] = useGameStateMachine();\n\n    const isInState = (toCheck) => current.matches(toCheck);\n\n    const providerObj = {\n        squares: current.context.squares,\n        whoseTurn: current.context.isXTurn ? 'X' : 'O',\n        isPlaying: isInState('playing'),\n        isGameOver: isInState('gameOver'),\n        isGameWon: isInState('gameOver.won'),\n        isGameDrawn: isInState('gameOver.drawn'),\n        iCheckingBoard: isInState('checkingBoard'),\n        nextPlayerToStart: current.context.xStartedLast ? 'O': 'X',\n        isSquareEmpty: index => {\n            return !current.context.squares[index];\n        },\n        isWinningSquare: index => {\n            return current.context.winningCombo !== null && current.context.winningCombo.includes(index);\n        },\n        markSquare: index => send('MAKE_MOVE', {square: index}),\n        playAgain: () => send('PLAY_AGAIN')\n    };\n\n    return <gameContext.Provider value={providerObj}>\n        {children}\n    </gameContext.Provider>\n};","import {useState, useEffect} from 'react';\n\nconst useTypeText = (text, delayPerKeystroke = 100) => {\n\n    const [typedText, setTypedText] = useState('');\n\n    useEffect(() => {\n\n        const timeout = setTimeout(() => {\n            if (typedText.length < text.length) {\n                setTypedText((oldText) => `${oldText}${text[oldText.length]}`);\n            }\n        }, delayPerKeystroke);\n\n        return () => {\n            clearTimeout(timeout);\n        }\n\n    }, [text, typedText, delayPerKeystroke]);\n\n    return typedText;\n}\n\nexport default useTypeText;","import React from 'react';\nimport useTypeText from '../Hooks/useTypeText';\n\nexport default () => {\n    const typedText = useTypeText(\"Noughts and Crosses\");\n\n    return <h1>&nbsp;{typedText}&nbsp;</h1>\n}","import {useContext} from 'react';\nimport {gameContext} from '../Contexts/GameContext';\n\nexport default () => {\n    return useContext(gameContext);\n};","import React from 'react';\nimport classnames from 'classnames';\nimport useGameContext from '../Hooks/useGameContext';\n\nexport default ({square, index}) => {\n\n    const {markSquare, isPlaying, isSquareEmpty, isGameWon, isWinningSquare} = useGameContext();\n\n    const handleClick = () => {\n        if (isPlaying && isSquareEmpty(index)) {\n            markSquare(index);\n        }\n    };\n\n    const classes = classnames('square', { 'square--winning': isGameWon && isWinningSquare(index), 'square--x': square === 'X', 'square--o': square === 'O'  });\n\n    return <div className={classes} onClick={handleClick}>\n        <span>{square}</span>\n    </div>\n};","import React from 'react';\nimport Square from './Square';\nimport useGameContext from '../Hooks/useGameContext';\nimport classNames from 'classnames';\n\nexport default () => {\n\n    const {squares, isGameOver} = useGameContext();\n\n    const boardClasses = classNames('board', { 'board--game-over': isGameOver });\n\n    return (\n        <div className={boardClasses}>\n            {squares.map((square, index) => {\n                return <Square square={square} index={index} key={index} />\n            })}\n        </div>\n    );\n}","import React from 'react';\nimport classNames from 'classnames';\nimport useGameContext from '../Hooks/useGameContext';\nimport { CSSTransition } from 'react-transition-group';\n\nexport default () => {\n\n    const {isGameWon, isGameDrawn, isGameOver, playAgain, whoseTurn, nextPlayerToStart} = useGameContext();\n\n    const classes = classNames({ 'x': nextPlayerToStart === 'X', 'o': nextPlayerToStart === 'O' });\n\n    return  (\n        <CSSTransition classNames='gameStatus' in={isGameOver} timeout={300} unmountOnExit>        \n            <div className='gameStatus'>\n                {isGameWon && <p>Game won by {whoseTurn}</p>}\n                {isGameDrawn && <p>Game drawn</p>}\n                <button onClick={() => playAgain()}>Play again?</button>\n                <p><span className={classes}>{nextPlayerToStart}'s</span> turn to start</p>\n            </div>\n        </CSSTransition>\n    );\n}","import React from 'react';\nimport './App.css';\nimport GameContextProvider from './Contexts/GameContext';\nimport Header from './Components/Header';\nimport Board from './Components/Board';\nimport GameStatus from './Components/GameStatus';\n\nfunction App() {\n  return (\n    <GameContextProvider>\n      <div className=\"app\">\n        <Header />\n          <GameStatus />\n        <Board />\n      </div>\n    </GameContextProvider>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}